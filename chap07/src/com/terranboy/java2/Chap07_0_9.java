package com.terranboy.java2;

public class Chap07_0_9 {

	public static void main(String[] args) {
		/*
		패키지란? 
		클래스의 묶음. 클래스 또는 인스페이스를 포함시킬 수 있으며, 서로 관련된 클래스들끼리 그루핑해놓음으로써 클래스를 효율적으로 관리 가능!
		같은 이름의 클래스일지라도 서로 다른 패키지에 존재할 수 있으므로, 자신만의 패키지 체계를 유지함으로써 다른 개발자가 개발한 클래스 라이브러리의
              클래스와 이름이 충돌하는 것을 피할 수 있다!
              지금까진 단순히 클래스 이름으로만 클래스를 구분했지만 클래스의 실제 이름은 패키지명을 포함한 것이다. (임포트를 했기 때문에 편하게 썼던 것일세ㅎㅎ)
              예: String클래스의 패키지명은 java.lang.String 즉, java.lang 패키지에 속한 String클래스라는 의미@! 그래서 다른 패키지에 속하면 같은 이름의 클래스라도 구별이 가능.
              클래스가 물리적으로 하나의 클래스파일인 것과 같이 패키지는 물리적으로 하나의 디렉토리다.
              예: java.lang.String클래스는 java의 서브디렉토리인 lang에 속한 String.class 파일이다.
              예: java.lang.System클래스는 java의 서브디렉토리인 lang에 속한 System.class 파일이다.
              (클래스 파일들을 압축한 것이 jar파일(*.jar)이며, 압축을 풀면 이 파일들을 볼 수 있다.) 
        (String 클래스는 rt.jar파일에 압축되어 있고 Java\jdk1.8.0_191\jre\lib 여기에 있더라.)        
              디렉토리가 하위 디렉토리를 가질 수 있는 것처럼 패키지도 다른 패키지를 포함할 수 있으며 쩜으로 구분한다.
              예: java.lang은 java폴더의 하위폴더 lang.
              
              패키지 선언 방법 : pakage 패키지명;
        
              패키지 정리
              1. 하나의 소스파일엔 첫 번째 문장으로 단 한 번의 패키지 선언만을 허용한다.
              2. 모든 클래스는 반드시 하나의 패키지에 속해야 한다.
              3. 패키지는 점(.)을 구분자로 계층구조 생성 가능
              4. 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리
              5. 선언방법 : pakage 패키지명; (패키지명은 대소문자 다 되긴 하지만, 클래스명과의 구분을 위해 소문자를 원칙으로 함)
              6. 패키지를 선언하지 않으면 모든 파일들은 defualt pakage(unnamed pakage)에 생성됨.(간단한 프로그램은 문제가 안되지만 프로젝트 규모가 커지거나 API와 같은 클래스 라이브러리를 작성하는 경우 패키지 구성 잘해야함)
		*/
	}
}
