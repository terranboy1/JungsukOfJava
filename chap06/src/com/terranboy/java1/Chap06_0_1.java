package com.terranboy.java1;

public class Chap06_0_1 {
	public static void main(String[] args) {
		//객체지향언어
		//------------------------------------------------------------------------------------------------------------------
		//객체지향이론의 기본 개념 : 1) 실제 세계는(사물)로 이루어져 있으며, 발생하는 모든 사건들은 사물간의 상호작용이다.
		//                        2) 실제 사물의 속성과 기능을 분석한 다음 데이터(변수)와 함수로 정의함으로써 가상 세계를 구현.
		//                        3) 객체지향언어는 기존의 프로그래밍 언어와 다른 전혀 새로운 것이 아니고, 기존 프로그래밍 언어에 몇 가지 새로운 규칙을 추가한 보다 발전된 형태의 것.
		//                        4) 이러한 규칙들을 이용해 코드 간에 서로 관계를 맺어 줌으로써 보다 유기적으로 프로그램을 구성하는 것이 가능해짐.
		//
		//객체지향언어의 주요 특징 : 1) 코드의 재사용성이 높다.(근데 이건 김성박 선생님이 약간 애매하다고 했음.)
		//                        2) 코드 관리가 용이하다. (코드간 관계를 이용해 적은 노력으로 쉽게 코드 변경)
		//                        3) 신뢰성이 높은 프로그래밍을 가능케함(캡슐화, 중복 제거로 인해 오작동 방지)
		//
		//객체지향 프로그래밍은 프로그래머에게 거시적 관점에서 설계할 수 있는 능력을 요구하기 때문에 객체지향개념을 이해했다 하더라도
		//장점들을 충분히 활용하려면 훈련을 많이 해야 한다.(이해가 설계로 이어지진 않는다는 것.)
		
		//클래스와 객체
		//------------------------------------------------------------------------------------------------------------------
		//클래스의 정의 : 1) 객체를 정의해놓은 것  2) 객체의 설계도 또는 틀           
		//클래스의 용도 : 1) 객체를 생성하는 데 사용.
		//
		//객체의 정의 : 1) 실제로 존재하는 것, 사물 또는 개념
		//객체의 용도 : 1) 객체가 가지고 있는 기능과 속성에 따라 다름(객체=상태+동작 / 객체=기능+속성)
		//
		//예) TV 설계도(클래스)는 TV라는 제품(객체)를 정의한 것이고, TV(객체)를 만드는 데 사용됨.
		//
		// 하나의 설계도만 잘 만들어 놓으면 제품을 만드는 일은 쉬워짐.(설계도대로만 만들면 되니까)
		// 마찬가지로 클래스도 한 번 잘 만들어 놓기만 하면, 매번 객체를 생성할 때마다 객체를 어떻게 만들어야할 지 고민 안해도 됨.
		// JDK에선 프로그래밍을 위해 많은 수의 유용한 클래스(API)를 제공하므로 우리는 이 클래스들을 이용해 원하는 기능의 프로그램을 쉽게 작성 가능.
		// 
		// 인스턴스화란? 클래스로부터 객체를 만드는 과정.(객체는 모든 인스턴스를 대표하는 포괄적 의미, 인스턴스는 보다 구체적인 의미)
		// 예) 책상은 객체다 / 책상은 책상 클래스의 객체다 / 책상은 책상 클래스의 인스턴스다
		//
		// 객체 = 속성(멤버변수, 특성, 필드, 상태) + 기능(메서드, 함수, 행위)
		//
		// 예) 속성 : 크기, 길이, 높이, 색상, 볼륨, 채널 
		//     기능 : 켜기, 끄기, 볼륨 높이기, 볼륨 줄이기, 채널 변경하기.
		
		// 실제 TV가 갖는 기능과 속성은 이 외에도 더 있지만, 프로그래밍에 필요한 속성과 기능만을 선택해 클래스를 작성하면 됨.
		
		// 각 변수의 자료형은 속성의 값에 맞는 것을 선택.
		
		// Tv클래스 만들어보기
		// class Tv{
		//       String color;  //색깔
		//       boolean power; //전원상태      ----------->  변수
		//       int channel;   //채널
		//
		//       void power() {power = !power;}
		//       void channelUp() {channel++} -----------> 메서드
		//       void channelDown() {channel--}
		
		// 인스턴스의 생성과 사용
		// -----------------------------------------------------------------------------------------------------------------------
		// Tv클래스를 선언한 것은 Tv설계도를 작성한 것에 불과하므로 Tv인스턴스를 생성해야 제품을 사용할 수 있다.
		// 인스턴스를 생성하는 방법은 여러가지가 있지만 일반적으로 다음과 같다.
		//
		// 클래스명 변수명;           //클래스의 객체를 참조하기 위한 참조변수 선언
		// 변수명 = new 클래스명();   //클래스의 객체 생성 후, 객체의 주소를 참조변수에 저장.
		//
		// Tv t;
		// t = new Tv();
		
		Tv t;            //Tv클래스 타입의 참조변수 t 선언. 메모리에 참조변수 t를 위한 공간이 마련됨. 아직 인스턴스가 없어서 이걸로 아무것도 할 수 없다.
		t = new Tv();    //연산자 new에 의해 Tv클래스의 인스턴스가 메모리 빈공간에 생성됨. 이 때 멤버변수는 각 자료형에 해당하는 기본값으로 초기화됨. 그리고 대입연산자에 의해 인스턴스의 주소가 참조변수에 저장됨. 이제 참조변수 t를 통해 Tv인스턴스에 접근 가능. 인스턴스를 다루기 위해선 참조변수가 반드시 필요.(참조변수 없으면 갈비지컬렉터님이...)	
		t.channel = 7;   //참조변수 t에 저장된 주소에 있는 인스턴스의 멤버변수 channel에 7을 저장. 인스턴스의 멤버변수(속성)을 사용하려면 '참조변수.멤버변수'와 같이 하면 됨. 
		t.channelDown(); //참조변수 t가 참조하고 있는 Tv인스턴스의 channelDown메서드 호출.
		System.out.println("현재 채널" + t.channel);
	}
}		
		//인스턴스와 참조변수의 관계는 마치 우리가 일상생활에서 사용하는 TV와 TV리모콘의 관계와 같다.
		//TV리모콘(참조변수)을 사용해 TV(인스턴스)를 다루기 때문.
		//다른 점은 실제 TV는 TV에 붙은 버튼을 이용해 조작이 가능하지만, 인스턴스는 오직 참조변수로만 다룰 수 있다는 거!
		//그리고 TV는 TV리모콘, 에어컨은 에어컨리모콘이 있듯이 Tv인스턴스를 사용하려면 Tv클래스 타입의 참조변수가 필요하다.
		//=참조변수 타입은 인스턴스의 타입과 같아야 한다. Tv t = new Tv();
